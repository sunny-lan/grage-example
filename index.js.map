{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,6CAAyC;AACzC,+CAAuC;AACvC,qDAA0C;AAE1C,MAAM,IAAI,GAAI,yBAAyB,CAAC;AACxC,MAAM,KAAK,GAAG,gBAAU,CAAC,IAAI,EAAE,SAAS,WAAW,CAAC,MAAM;IACtD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AACH,eAAe;AACf,MAAM,SAAS,GAAG,iBAAO,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,GAAG,iBAAO,CAAC,GAAG,CAAC,EAAE,CAAC;AAE9D,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE;IACd,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;IAElC,mCAAmC;IACnC,KAAK,CAAC,OAAO,CAAC,yBAAQ,EAAE,SAAS,YAAY,CAAC,IAAI;QAC9C,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,KAAK,KAAK,iBAAO,CAAC,UAAU,CAAC,IAAI,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;SAC9B;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;SAChC;IACL,CAAC,CAAC,CAAC;IAEH,qDAAqD;IACrD,mDAAmD;IACnD,KAAK,CAAC,OAAO,CAAC,yBAAQ,EAAE,SAAS,KAAK;QAClC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;QAC/B,wBAAwB;QACxB,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,OAAO,CAAC,SAAS,EAAE,iBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/E,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,eAAe,CAAC,SAAS,EAAE,iBAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;QAEvF,oCAAoC;QACpC,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,OAAO,CAAC,UAAU,EAAE,iBAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1E,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,YAAY,CAAC,UAAU,EAAE,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,4CAA4C;IAC5C,KAAK,CAAC,MAAM,CAAC,yBAAQ,EAAE,SAAS,IAAI;QAChC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;IACjC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,wCAAwC;AACxC,SAAS,aAAa;IAClB,wCAAwC;IACxC,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,YAAY,CAAC,UAAU,EAAE,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAChF,UAAU,CAAC,GAAG,EAAE;QACZ,KAAK,CAAC,IAAI,CAAC,yBAAQ,EAAE,iBAAO,CAAC,YAAY,CAAC,UAAU,EAAE,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IACnF,CAAC,EAAE,GAAG,CAAC,CAAC;AACZ,CAAC","sourcesContent":["import makeClient from 'grage-lib/client'\r\nimport esp8266 from 'grage-lib/esp8266'\r\nimport {deviceID} from \"./device_id.json\";\r\n\r\nconst host =  \"grage.azurewebsites.net\";\r\nconst grage = makeClient(host, function onTerminate(reason) {\r\n    console.log('[Terminated]', reason);\r\n});\r\n//esp constants\r\nconst sensorPin = esp8266.Pin.D6, controlPin = esp8266.Pin.D7;\r\n\r\ngrage.onOpen(() => {\r\n    console.log('connected to server')\r\n\r\n    // Begin receiving data from device\r\n    grage.connect(deviceID, function onDeviceData(data) {\r\n        console.log('received data from device:')\r\n        const sense = data.pinReadings[sensorPin];\r\n        if (sense === esp8266.LogicLevel.HIGH) {\r\n            console.log('door is open')\r\n        } else {\r\n            console.log('door is closed')\r\n        }\r\n    });\r\n\r\n    //when device becomes alive, run initialization stuff\r\n    //such as setting up inputs, outputs and interrupts\r\n    grage.onAlive(deviceID, function alive() {\r\n        console.log('device is online')\r\n        //enable input then read\r\n        grage.send(deviceID, esp8266.pinMode(sensorPin, esp8266.PinMode.INPUT_PULLUP));\r\n        grage.send(deviceID, esp8266.attachInterrupt(sensorPin, esp8266.InterruptMode.CHANGE));\r\n\r\n        //enable output, make sure it is off\r\n        grage.send(deviceID, esp8266.pinMode(controlPin, esp8266.PinMode.OUTPUT));\r\n        grage.send(deviceID, esp8266.digitalWrite(controlPin, esp8266.LogicLevel.LOW));\r\n    });\r\n\r\n    //when device becomes dead, disable ui again\r\n    grage.onDead(deviceID, function dead() {\r\n        console.log('device offline')\r\n    });\r\n});\r\n\r\n// call this function to open/close door\r\nfunction openCloseDoor() {\r\n    //send 100ms pulse to garage door switch\r\n    grage.send(deviceID, esp8266.digitalWrite(controlPin, esp8266.LogicLevel.HIGH));\r\n    setTimeout(() => {\r\n        grage.send(deviceID, esp8266.digitalWrite(controlPin, esp8266.LogicLevel.LOW));\r\n    }, 100);\r\n}"]}